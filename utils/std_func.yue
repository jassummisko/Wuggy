export take = (tab, n) -> [el for el in *tab[,n]]
export drop = (tab, n) -> [el for el in *tab[n+1,]]
export head = (tab) -> tab[1] -- {1,2,3} -> {1}
export tail = (tab) -> drop tab, 1 -- {1,2,3} -> {2,3}
export map = (tab, op) -> [op el for el in *tab] 
export foldl = (tab, op, val) ->
    val = op val, el for el in *tab
    val
export foldr = (tab, op, val) ->
    val = op val, tab[i] for i=#tab, 1, -1
    val
export fold = (tab, op) -> foldl (tail tab), op, (head tab)
export sum = (tab) -> fold tab, (a,b)->a+b
export product = (tab) -> fold tab, (a,b)->a*b
export split = (str, sep) -> [el for el in (str)\gmatch "([^#{sep}]+)"]
export words = (str) -> split str, "%s"
export chars = (str) -> [str\sub i, i for i=1, #str]
export reverse = (tab) -> [tab[i] for i=#tab, 1, -1]
export sorted = (tab, func) -> 
    buff = {i, k for i, k in ipairs tab}
    table.sort buff if func == nil
    table.sort buff, func if func
    buff
export join = (tab, sep=" ") -> fold tab, (a,b) -> a..sep..b